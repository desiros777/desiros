
/* Copyright (C) 2004,2005  The DESIROS Team
    desiros.dev@gmail.com

   This program is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2
   of the License, or (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
   USA. 
 */

#ifndef STRUCT_H_
#define STRUCT_H_

/* Protection rings: */
#define KERNEL_PL	0 /* Operating system kernel.   */
#define USER_PL		3 /* Applications.   

/* Segment selector: */
typedef struct
{
	unsigned rpl   :  2; /* Requested privilege level. */
	unsigned ti    :  1; /* Table indicator.           */
	unsigned index : 13; /* Index.                     */
} __attribute__((packed)) seg_sel_t;


#define GDT	0 /* Global descriptor table. */
#define LDT	1 /* Local descriptor table.  */

/* Segment descriptor: */
typedef struct
{
	unsigned short limit_0; /* Segment limit (15:00).        */
	unsigned short base_0;  /* Segment base address (15:00). */
	unsigned char base_1;   /* Segment base address (23:16). */
	unsigned type     : 4;  /* Segment type.                 */
	unsigned s        : 1;  /* Descriptor type.              */
	unsigned dpl      : 2;  /* Descriptor privilege level.   */
	unsigned p        : 1;  /* Segment present.              */
	unsigned limit_1  : 4;  /* Segment limit (19:16).        */
	unsigned avl      : 1;  /* Available for use.            */
	unsigned reserved : 1;  /* Reserved.                     */
	unsigned db       : 1;  /* Default operation size.       */
	unsigned g        : 1;  /* Granularity.                  */
	unsigned char base_2;   /* Segment base address (31:24). */
} __attribute__((packed)) seg_descr_t;


/* Control register 3: */
typedef struct
{
	unsigned reserved_0 :  3; /* Reserved.                      */
	unsigned pwt        :  1; /* Page-level writes transparent. */
	unsigned pcd        :  1; /* Page-level cache disable.      */
	unsigned reserved_1 :  7; /* Reserved.                      */
	unsigned sign_phys  : 20; /* Page-directory base.           */
} __attribute__((packed)) cr3_t;

/* EFLAGS register: */
typedef struct
{
	unsigned cf         :  1; /* Carry flag.                     */
	unsigned reserved_0 :  1; /* Reserved.                       */
	unsigned pf         :  1; /* Parity flag.                    */
	unsigned reserved_1 :  1; /* Reserved.                       */
	unsigned af         :  1; /* Auxiliary carry flag.           */
	unsigned reserved_2 :  1; /* Reserved.                       */
	unsigned zf         :  1; /* Zero flag.                      */
	unsigned sf         :  1; /* Sign flag.                      */
	unsigned tf         :  1; /* Trap flag.                      */
	unsigned intrf      :  1; /* Interrupt enable flag.          */
	unsigned df         :  1; /* Direction flag.                 */
	unsigned of         :  1; /* Overflow flag.                  */
	unsigned iopl       :  2; /* I/O privilege level field.      */
	unsigned nt         :  1; /* Nested task flag.               */
	unsigned reserved_3 :  1; /* Reserved.                       */
	unsigned rf         :  1; /* Resume flag.                    */
	unsigned vm         :  1; /* Virtual-8086 mode flag.         */
	unsigned ac         :  1; /* Alignment check flag.           */
	unsigned vif        :  1; /* Virtual interrupt flag.         */
	unsigned vip        :  1; /* Virtual interrupt pending flag. */
	unsigned id         :  1; /* Identification flag.            */
	unsigned reserved_4 : 10; /* Reserved.                       */
} __attribute__((packed)) eflags_t;

/* Task-state segment: */
typedef struct
{
	seg_sel_t prev_task_link;   /* Previous task link field. */
	unsigned short reserved_0;  /* Reserved.                 */

	/* Privilege level-0, -1, and -2 stack pointer fields: */
	unsigned long esp0;         /* ESP0.     */
	seg_sel_t ss0;              /* SS0.      */
	unsigned short reserved_1;  /* Reserved. */
	unsigned long esp1;         /* ESP1.     */
	seg_sel_t ss1;              /* SS1.      */
	unsigned short reserved_2;  /* Reserved. */
	unsigned long esp2;         /* ESP2.     */
	seg_sel_t ss2;              /* SS2.      */
	unsigned short reserved_3;  /* Reserved. */

	cr3_t cr3;                  /* CR3 control register field.      */
	unsigned long eip;          /* EIP (instruction pointer) field. */
	eflags_t eflags;            /* EFLAGS register field.           */

	/* General-purpose register fields: */
	unsigned long eax;          /* EAX. */
	unsigned long ecx;          /* ECX. */
	unsigned long edx;          /* EDX. */
	unsigned long ebx;          /* EBX. */
	unsigned long esp;          /* ESP. */
	unsigned long ebp;          /* EBP. */
	unsigned long esi;          /* ESI. */
	unsigned long edi;          /* EDI. */

	/* Segment selector fields: */
	seg_sel_t es;               /* ES.       */
	unsigned short reserved_4;  /* Reserved. */
	seg_sel_t cs;               /* CS.       */
	unsigned short reserved_5;  /* Reserved. */
	seg_sel_t ss;               /* SS.       */
	unsigned short reserved_6;  /* Reserved. */
	seg_sel_t ds;               /* DS.       */
	unsigned short reserved_7;  /* Reserved. */
	seg_sel_t fs;               /* FS.       */
	unsigned short reserved_8;  /* Reserved. */
	seg_sel_t gs;               /* GS.       */
	unsigned short reserved_9;  /* Reserved. */

	seg_sel_t ldt_seg_sel;      /* LDT segment selector field. */
	unsigned short reserved_10; /* Reserved.                   */
	unsigned t           :  1;  /* T (debug trap) flag.        */
	unsigned reserved_11 : 15;  /* Reserved.                   */
	unsigned short io_map;      /* I/O map base address field. */
} __attribute__((packed)) tss_t;


#endif 



